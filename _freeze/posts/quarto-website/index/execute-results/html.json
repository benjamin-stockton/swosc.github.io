{
  "hash": "ee6be4c3a428580573b687590b710b8a",
  "result": {
    "markdown": "---\ntitle: \"Crafting your website with Quarto and GitHub\"\nauthor: \"Lucas Godoy\"\ndate: \"2023-09-14\"\ncategories: [miscelllaneous]\nengine: knitr\nfreeze: true\n---\n\n\n## Terminal basics\n\n* `pwd` lists current directory;\n\n* `ls` lists directory content. For example, run `ls my-dir` to know what is\n  inside the directory called `my-dir`.\n\n* `cd` stands for change directory. To navigate to a directory, use: `cd\n  <path-to-directory>`;\n  \n* `mv` Moves or renames files. Usage: `mv <old-name/location> <new-name/location>`;\n  \n## Pre-requisites\n\nWe assume you have:\n\n1. [`Quarto`](https://quarto.org/) installed on your labtop;\n2. A [GitHub](https://github.com/) account;\n3. We also assume you are able to connect to GitHub using SSH keys. For more\n   details, see\n   [this](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)\n4. A `terminal` available (Windows users, see\n   [this](https://learn.microsoft.com/en-us/windows/terminal/install)).\n   \n## Step 1: create a repo\n\nIn this workshop, we assume you are creating a personal web page. GitHub allows\nyou to host a personal website for free under the domain\n`<username>.github.io`. We first need to create a GitHub repository named like\nthat. For example, in this talk, we will create a website for a user called\n`statcomp-org` (see @fig-create-repo).\n\n![Screenshot of the page where repos are\ncreated](create-repo.png){#fig-create-repo}\n\n## Step 2: Using our quarto template\n\nOpen a terminal window and navigate to a directory where you want to keep your\nwebsite. On my laptop, I have a directory (or folder) called `git-projects`\nwhere I store all the `git` repos I work with. The following code chunk creates\na directory to store the files we will use to create your website locally and\nnavigates to it.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir <your-username>.github.io\ncd <your-username>.github.io\n```\n:::\n\n\nNow, we obtain a template running the following command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto use template swosc/quarto-template\n```\n:::\n\n\nYou will be asked the following questions. Type \"Y\" and the key \"enter\" and \".\"\nand the key \"enter\", respectively.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nQuarto templates may execute code when documents are rendered. If you do not \ntrust the authors of the template, we recommend that you do not install or \nuse the template.\n? Do you trust the authors of this template (Y/n) › Y\n? Directory name: › .\n```\n:::\n\n\n::: {.callout-important}\nWhen running the command below, we are assuming your current \"working directory\"\nin the terminal is the directory where you are going to keep your website.  Run\n`pwd`, to make sure you are working on the right directory.\n:::\n\nLet us use `ls` to track the files that were generated in our directory:\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\nLICENSE.md         blog.qmd           highlight-author.R profile.jpg\nMakefile           custom.scss        index.qmd          pubs.bib\n_quarto.yml        github             lua-refs.lua       styles.css\napa-cv.csl         gitignore          posts\n```\n:::\n\n\n::: {.callout-tip}\nAlways avoid creating filenames with special charaters or spaces.\n:::\n\nThe structure of the folder is as follows:\n\n::: {.cell}\n\n```{.bash .cell-code}\n.\n├── LICENSE.md\n├── Makefile\n├── _quarto.yml\n├── apa-cv.csl\n├── blog.qmd\n├── custom.scss\n├── github\n│   └── workflows\n│       └── publish.yml\n├── gitignore\n├── highlight-author.R\n├── index.qmd\n├── lua-refs.lua\n├── posts\n│   ├── _metadata.yml\n│   ├── post-with-code\n│   │   ├── image.jpg\n│   │   └── index.qmd\n│   └── welcome\n│       ├── index.qmd\n│       └── thumbnail.jpg\n├── profile.jpg\n├── pubs.bib\n└── styles.css\n\n6 directories, 19 files\n```\n:::\n\nSee below a description on what each of those files are:\n\n- `LICENSE.md` contains the license for your website repo. Currently, the\n  license in the template is a\n  [CC-BY](https://creativecommons.org/licenses/by/4.0/) license. That is, anyone\n  is free to share and adapt, must give appropriate credit. You can use the\n  `usethis` package to change this license. See [this\n  link](https://usethis.r-lib.org/reference/licenses.html) for thurther info.\n\n- `Makefile` will only be used if you wish to include a page in the website with\n  your publications. \n\n- `_quarto.yml` is perhaps the most important file we will keep. It will give\n  instructions on how to design the website (more on this later).\n\n- `apa-cv.csl` is a helper that controls the templates of the publications list\n  that may be generated using the Makefile.\n  \n- `blog.md` is the file that will control how your \"blog\" page looks like.\n\n- `custom.scss` helps to further customize the website.\n\n- `github` is a folder that we need to rename to `.github`. It will help GitHub\n  to publish your website online.\n\n- `gitignore` rename to `.gitignore`. This file will store the name of the files\n  you do not want to push to GitHub.\n\n- `highlight-author.R` is a helper `R` script intended to help with the creation\n  of a opublications' list (optional).\n\n- `index.qmd` is the landing page of your website.\n\n- `lua-refs.lua` is a `lua` script that will be used to generate your\n  publications list (optional).\n  \n- `posts/` is a folder containing your posts and some metadata (optional, only\n  if you want to blog as well)\n  * The `_metadata.yml` contains some information on how to deal with your\n    posts. In particular, it will tell GitHub avoid compiling them (we will\n    compile the posts locally)\n  * Each subfolder represents a blog post. Within the blogpost folder, we need a\n    `index.qmd` file (more on this later).\n\n- `profile.jpg` replace this with your profile picture.\n\n- `pubs.bibs` (optional) input your publications in `BibTeX` here.\n\n- `styles.css` allows for further customization of the website.\n\n## Step 3: setting up git repo\n\nThe next step is to setup the `git` repo. Before doing so, let's rename the `.github` and `.gitignore` files. This is achieved by running:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv github .github\nmv gitignore .gitignore\n```\n:::\n\n\nNow, let's set the git repo and push the gitignore file to the remote repo.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit init\ngit add .gitignore\ngit commit -m \"commiting gitignore\"\ngit branch -M main\ngit remote add origin git@github.com:<your-username>/<your-username>.github.io\ngit push -u origin main\n```\n:::\n\n\nIf you want to get a grasp of how the website is looking like, run:\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto preview\n```\n:::\n\n\n::: {.callout-note}\nYou can use `quarto preview ` to visualize the changes anytime you modify\nsomething on your quarto website.\n:::\n\n## Step 4: Let's taylor our website!\n\n::: {.callout-note}\nYou may use your preferred `IDE` to edit `.qmd` files. Popular choices are\n`Rstudio`, `VScode`, and (not so popular) `emacs`. For the last two, we advise\nyou to install the appropriate extensions to enjoy all the capabilities of\nquarto.\n:::\n\nFirst, we will customize the `index.qmd` file.\n\nAt the beginning, the `index.qmd` file will look like this:\n```yml\n---\nimage: profile.jpg\nabout:\n  template: jolla\n  links:\n    - icon: twitter\n      text: Twitter\n      href: https://twitter.com\n    - icon: linkedin\n      text: LinkedIn\n      href: https://linkedin.com\n    - icon: github\n      text: Github\n      href: https://github.com\n\n---\n\n<Write somethign about yourself or your website>\n```\n\nIn general, we want to replace the `href` field under Twiter, Linkedin, and\nGitHub with the link to our own accounts. The `profile.jpg` file can also be\nchanged (or we can just overwrite it).\n\nThere are 5 possible inputs for the `template` field. They are:\n\n* `jolla` (used in the provided template)\n* `trestles`\n* `solana`\n* `marquee`\n* `broadside`\n\nPlay around with the different options to figure out which one suits you best.\n\nWe can include more pages and resources to our website by adding new `.qmd` (or\neven `.pdf`) files to it and editing the `_quarto.yml` file.\n\nFor example, assume we want to include our CV as a `.pdf` file.  First, we copy\nour `.pdf` file into the directory where our _website project_ is located, let's\nsay we named it `cv.pdf`. Next, we add the following to our `_quarto.yml` file.\n\n```yml\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://<yourwebsite>.github.io\n  navbar:\n    right:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\n\n```\n\nAdding a new `.qmd` file is even simpler. We do not need the `text` and `href`\nparameters.  First, create a `.qmd` file. Let us call it `my-new-qmd.qmd`. The \"body\"\nof the file can be anything you want, but the header should have (at least) a\ntitle. The title will tell how this file will appear in the `navbar`.\n```yml\n---\ntitle: \"My new `.qmd` file\"\n---\n\n```\n\nTo add `my-new-qmd.qmd` to the navbar, edit the `_quarto.yml` as follows:\n\n```yml\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://<yourwebsite>.github.io\n  navbar:\n    right:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n      - my-new-qmd.qmd\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\n\n```\n\nWe can further customize the navbar. For example, we can move the `twitter` and\n`github` icons to the right and everything else to the left.\n\n```yml\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://<yourwebsite>.github.io\n  navbar:\n    left:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n        - my-new-qmd.qmd\n    right:\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\n\n```\n\nWe can easily change the way our website look by changing the `theme` parameter\nunder `format` and `html`. To get a list of the 25 themes available, take a look\nat [this link](https://quarto.org/docs/output-formats/html-themes.html).\n\nAlternatively, we can change the colors of a theme using a `scss` (or `css`\nfile). For instance, let's add the university colors to the `cosmo`\ntheme. First, create a file called `custom.scss` in the root directory of our\nwebsite. Next, add the following lines to the file\n\n```scss\n#| eval: false\n/*-- scss:defaults --*/\n         \n$primary:       #000E2F !default;\n$secondary:     #E4002B !default;\n```\n\n::: {.callout-important}\nIt is important to include the `/*-- scss:defaults --*/` to the `custom.scss`\nfile. Otherwise, the changes will not be applied.\n:::\n\nFinally, we rewrite our `_quarto.yml` file as follows:\n\n```yml\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://<yourwebsite>.github.io\n  navbar:\n    left:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n        - my-new-qmd.qmd\n    right:\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme:\n      - cosmo\n      - custom.scss\n    css: styles.css\n---\n\n```\n\nWe can also import google fonts into our website.  To test it, let's change the\nfont to Ubuntu. First, we use the [Google Font](https://fonts.google.com/) API\nto import the desired font (for further details see\n[this](https://ucsb-meds.github.io/customizing-quarto-websites/#/select-fonts)).\n\n```scss\n#| eval: false\n/*-- scss:defaults --*/\n\n// colors\n$primary:       #000E2F !default;\n$secondary:     #E4002B !default;\n\n// fonts\n@import url('https://fonts.googleapis.com/css2?family=Ubuntu&display=swap');\n```\n\nNext, we update, once again, the `_quarto.yml` file.\n\n```yml\n---\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nwebsite:\n  title: \"How do you wanna call your website?\"\n  search: true\n  cookie-consent: false\n  twitter-card: true\n  open-graph: true\n  site-url: https://<yourwebsite>.github.io\n  navbar:\n    left:\n      - blog.qmd\n      - text: \"How do I wanna call my CV\"\n        href: cv.pdf\n        - my-new-qmd.qmd\n    right:\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\n  page-footer: \n    left: \"You can write somethig here too.\"\n\nformat:\n  html:\n    theme:\n      - cosmo\n      - custom.scss\n    mainfont: Ubuntu\n    css: styles.css\n---\n\n```\n\n::: {.callout-tip}\nThe possibilities of customization are **endless**! \nMy advice is to keep it simple.\n:::\n\n### Bonus\n\nIf you have your publications in a `.bib` file, we can use some `lua` and `R` to\nget a tab with your publications working. If you have no idea about what\n`BibTeX` is, take a look at [this\nlink](https://www.overleaf.com/learn/latex/Bibliography_management_with_bibtex).\n\n_Kalu_ (@fig-kalu) has her publications information in a file called\n`pubs.bib`. She has published one paper as a first author and another one as a\nco-author, collaborating with Cacau (@fig-cacau).\n\n::: {#fig-animals layout-ncol=2} \n\n![Kalu](kalu.jpg){#fig-kalu}\n\n![Cacau](cacau.jpg){#fig-cacau}\n\nSome of my pets.\n:::\n\nSee below how her `pubs.bib` file looks like\n```bibtex\n@article{hernandes2023meowmazing,\n  title =        {Meowmazing paper I wrote},\n  author =       {Kalu Hernandez},\n  journal =      {Meow journal},\n  number =       000,\n  pages =        {0--0},\n  year =         2023,\n  publisher =    {Crazy cats dot com}\n}\n\n@article{godoy2022growlmazing,\n  title =        {Growlmazing paper we wrote},\n  author =       {Cacau Godoy, Kalu Hernandez},\n  journal =      {Meow journal},\n  number =       000,\n  pages =        {0--0},\n  year =         2023,\n  publisher =    {Dogs and cats getting along}\n}\n```\n\nTo transform this `pubs.bib` into a `.qmd` file, we will use `make` (for more\ndetails see\n[this](https://www.gnu.org/software/make/manual/html_node/Introduction.html)). There\nare some helper files in our directory, they are `Makefile`, `apa-cv.csv`\n(citation style file), `highlight-author.R`, and `lua-refs.lua`.\nThe `Makefile` looks as follows:\n\n```bash\nall: publications\n\t@quarto render\n\npublications: pubs.bib apa-cv.csl lua-refs.lua\n\t@quarto pandoc -L lua-refs.lua \\\n\t\tpubs.bib --csl=apa-cv.csl \\\n\t\t-V --toc=false \\\n\t\t--to=markdown-citations \\\n\t\t-o publications.qmd\n\t@Rscript highlight-author.R \\\n\t\t\"Hernandez, K.\" \"publications.qmd\"\n\nclean:\n\trm -rf publications* *~\n```\n\nIt uses the `lua-refs.lua` script to create a `publications.qmd` file based on\n`pubs.bib`. Next, it uses R to highlight a selected author.\n\n::: {.callout-important}\nTo make it work with your `.bib` file, you need to populate `pubs.bib` with your\npublications or include another `.bib` file in the directory. If that's the\ncase, replace `pubs.bib` by `<your-file>.bib` in the `Makefile`. Make sure you\nalso changes `Hernandez, K.` in the `Makefile` to the way your name appears in\nthe references.\n:::\n\nNow, we run:\n```bash\n#| eval: false\nmake publications\n```\n\nand it will generate a `publications.qmd` file. Now we only need to tell our\n`_quarto.yml` how to \"find\" this new file.\n\n## Step 4: Publishing\n\nPublishing the website will be one of the easiest parts. We will use GitHub\nActions (GA) and GitHub pages.\n\nBasically, all you have to do is to go to your repository on GitHub, click on\n`Settings > Pages`.  Next, under **Build and Deployment**, set **Deploy from a\nbranch**, and, under **Branch**, select `main` and `/docs`. \n\n![](gh-pages.png)\n\nNext, you should create a new `branch` called `gh-pages`. To do so, click on\n`main`, and then on `View all branches`. Next, `create new branch`. Name the new\nbranch as `gh-pages`.\n    \nNow, every time you `push` your changes to github, the website will be deployed\n(published) at `<your-username>.github.io`.\n\n## Closing comments\n\nCreating a website is a fun task that may take a lot of your time if you are too\nattached to details, be mindful. The best way to move forward, is being **good\nat _Googling_** and paying attention to the **error messages** (do never dismiss\nthem!).\n\nThere are many resources online teaching you how to customize your documents,\nwrite reports, and so on in `Quarto`. If you want to do something different, is\nvery likely that someone has already done that. So, once again, always search\nthe web thoroughly to avoid \"reinventing the wheel\".\n\n## Further resources (explore)\n\n* [Quarto website](https://quarto.org/docs/guide/) provides a bunch of\n  resources;\n\n* [Customizing Quarto\n  Websites](https://ucsb-meds.github.io/customizing-quarto-websites/) talk, by\n  [Sam Csik](https://samanthacsik.github.io/);\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}