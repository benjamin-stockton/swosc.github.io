{
  "hash": "855f644735a4ce50680190b2f47d4701",
  "result": {
    "markdown": "---\ntitle: \"Getting to know Stan - SWOSC\"\nauthor: \"Ben Stockton\"\ndate: 11-16-2023\nresults: hold\nbibliography: swosc-stan.bib\ncategories: [bayesian inference]\nfreeze: true\n---\n\n\n![](stan_logo.png)\n\n## Installation\n\nTo get started, we'll head over to Stan's [documentation](https://mc-stan.org/) to see how to get set up in R. For this presentation, I'll use the CmdStan toolchain that's implemented in R by the `cmdstanr` [package](https://mc-stan.org/cmdstanr/) [@gabry2023]. There are also Python, command line, Matlab, Julia, and Stata interfaces to Stan and a Python interface for cmdstan called [CmdStanPy](https://github.com/stan-dev/cmdstanpy) [@cmdstanp].\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nset.seed(98463)\n\n# install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\nlibrary(cmdstanr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is cmdstanr version 0.6.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan path: C:/Users/stocb/OneDrive/Documents/.cmdstan/cmdstan-2.33.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- CmdStan version: 2.33.1\n```\n:::\n\n```{.r .cell-code}\n# cmdstanr::install_cmdstan()\ncmdstanr::cmdstan_version()\ncmdstanr::cmdstan_path()\ncmdstanr::check_cmdstan_toolchain()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe C++ toolchain required for CmdStan is setup properly!\n```\n:::\n\n```{.r .cell-code}\n# install.packages(c(\"bayesplot\", \"ggplot2\", \"posterior\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.33.1\"\n[1] \"C:/Users/stocb/OneDrive/Documents/.cmdstan/cmdstan-2.33.1\"\n```\n:::\n:::\n\n\n## A Very Brief Introduction to Bayesian Data Analysis\n\nThe broadest conceptual overview of Bayesian data analysis is that this methodology allows us to incorporate prior knowledge about the model/data into our analysis which is based on a posterior distribution that is derived from the prior and likelihood. Bayesian inference treats the parameters of the model as random variables whose distribution we are interested in either deriving analytically or approximating through computation. This is a key distinction from frequentist methods taught in math stat and applied stat where parameters are fixed values and their estimators are functions of a random sample and the sampling distribution of the estimator is used for inference.\n\n::: callout-important\n## Bayes Rule\n\nA quick reminder of Bayes Rule.\n\nLet $\\theta$ be a random variable with (prior) distribution $p(\\theta)$, $Y$ be a random variable that depends on $\\theta$ with conditional distribution or likelihood $p(y | \\theta)$. Then their joint distribution is $p(y, \\theta) = p(y|\\theta) p(\\theta)$.\n\nBayes rule lets us flip the conditioning from the likelihood to get $p(\\theta | y)$\n\n$$\np(\\theta | y) = \\frac{p(y, \\theta)}{p(y)} = \\frac{p(y|\\theta) p(\\theta)}{\\int p(y, \\theta) d\\theta} \\propto p(y|\\theta) p(\\theta)\n$$\n:::\n\nTo be a little more specific, we have three central components to the model. For ease of exposition, let's consider the simple regression model $E(Y_i | X_i = x_i, \\boldsymbol{\\beta}, \\sigma^2) = \\beta_0 + \\beta_1 X_i$ and $Var(Y_i | X_i = x_i, \\boldsymbol{\\beta}, \\sigma^2) = \\sigma^2$ where we have $i = 1,\\dots,N$ observations of $(Y_i, X_i)'$ from Ch. 14 of Bayesian Data Analysis [@gelman2013bayesian, p. 354-358]. From here on I will suppress conditioning on the observed predictor $X_i = x_i$ since we are considering the design matrix $X = (1_N, \\mathbf{x})$ to be fixed and known where $\\mathbf{x} = (x_1,\\dots, x_N)'$.\n\n1.  **The Prior:** a distribution for the parameters that doesn't depend on the data $p(\\theta)$.\n2.  **The (Data) Likelihood:** a model for the data that depends on the parameters $p(y | \\theta)$.\n3.  **The Posterior:** a distribution that uses Bayes rule to define distribution of the parameters given the data $p(\\theta|y)$.\n\n## Why Stan?\n\n-   Stan is one of several ways to run MCMC for Bayesian inference\n\n    -   Nimble and OpenBUGS are two other languages dedicated to probabilistic programming\n    -   R, Rcpp, Julia, and Python are other more general purpose options for writing the sampler from scratch\n\n-   Other methods use combinations of Gibbs, Metropolis-Hastings, and slice sampling; Stan uses Hamiltonian Monte Carlo and the No-U-Turn Sampler (NUTS) which is more efficient and typically requires less thinning\n\n-   Stan only allows for continuous parameters\n\n## Some examples in Stan\n\nWe'll continue with the single predictor regression model to model NCAA Women's Basketball team's total wins by their 3 point field goal percentage from the 2022-2023 season. Data collected from [NCAA](https://stats.ncaa.org/rankings?sport_code=WBB&division=2).\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nncaaw <- readr::read_csv(file = \"Data/NCAAW-freethrows-threes-2022-2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 350 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Team, WL\ndbl (9): G, FT, FTA, FTpct, FG3, FG3A, FG3pct, W, L\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nIn the 2022-2023 season there were $N = 350$ teams. The relationship between their wins and three point percentage is displayed in @fig-scatter.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(ncaaw, aes(FG3pct, W)) +\n    geom_point() +\n    labs(title = \"2022-23 NCAAW Wins by 3pt%\", \n         subtitle = paste0(\"r = \", round(cor(ncaaw$W, ncaaw$FG3pct), 3)),\n         x = \"3pt%\",\n         y = \"Wins\")\n```\n\n::: {.cell-output-display}\n![Scatter plot of the Total Wins by 3 pt Field Goal %.](intro_to_stan_files/figure-html/fig-scatter-1.png){#fig-scatter width=672}\n:::\n:::\n\n\nAs a baseline, we'll find the maximum likelihood estimates for the regression parameters and variance.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nfit_ml <- lm(W ~ FG3pct, data = ncaaw)\n(beta_ml <- coef(fit_ml))\nsmry_ml <- summary(fit_ml)\n(sigma_ml <- smry_ml$sigma)\nmles <- data.frame(Parameters = c(\"beta_0\", \"beta_1\", \"sigma\"),\n                   Estimates = c(beta_ml, sigma_ml))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)      FG3pct \n  -14.94468     1.00929 \n[1] 5.908144\n```\n:::\n:::\n\n\nThe fitted line is displayed in @fig-scatter-ols.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(ncaaw, aes(FG3pct, W)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    labs(title = \"2022-23 NCAAW Wins by 3pt%\", \n         subtitle = paste0(\"r = \", round(cor(ncaaw$W, ncaaw$FG3pct), 3)),\n         x = \"3pt%\",\n         y = \"Wins\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![Now the OLS regression line is super-imposed in blue.](intro_to_stan_files/figure-html/fig-scatter-ols-1.png){#fig-scatter-ols width=672}\n:::\n:::\n\n\n### Non-informative Prior Regression Model\n\nLet's consider the simple regression model $E(Y_i | X_i, \\boldsymbol{\\beta}, \\sigma^2) = \\beta_0 + \\beta_1 X_i$ and $Var(Y_i | X_i = x_i, \\boldsymbol{\\beta}, \\sigma^2) = \\sigma^2$ [@gelman2013bayesian, p. 354-358].\n\n1.  **The Prior:** $p(\\boldsymbol{\\beta}, \\log\\sigma) = 1 \\equiv p(\\boldsymbol{\\beta}, \\sigma^2) \\propto \\sigma^{-2}$\n2.  **The (Data) Likelihood:** $\\mathbf{Y} | \\boldsymbol{\\beta}, \\sigma^2 \\sim N_N(X\\boldsymbol{\\beta}, \\sigma^2 I_N).$\n3.  **The Posterior:**\n\n\n```{=tex}\n\\begin{align*}\n    p(\\boldsymbol{\\beta}, \\sigma^2 | \\mathbf{y}) &= p(\\boldsymbol{\\beta} | \\sigma^2, \\mathbf{y}) \\times p(\\sigma^2 | \\mathbf{y}) \\\\\n        &= N_2(\\boldsymbol{\\beta} | \\hat{\\boldsymbol{\\beta}}, \\sigma^2 (X'X)^{-1}) \\times Inv-\\chi^2 (\\sigma^2 | N-2, s^2) \\\\\n    \\hat{\\boldsymbol{\\beta}} &= (X'X)^{-1} X'\\mathbf{y} \\\\\n    s^2 &= \\frac{1}{N-2} (\\mathbf{y} - X\\hat{\\boldsymbol{\\beta}})' (\\mathbf{y} - X\\hat{\\boldsymbol{\\beta}})   \n\\end{align*}\n```\n\nFirst we write the Stan code in a separate file. See the [Stan User's Guide Part 1.1](https://mc-stan.org/docs/stan-users-guide/linear-regression.html#vectorization.section) for programming this model without the analytic posteriors. ([Download the file here](non-informative-regression.stan){target=\"_blank\"})\n\n``` {.stan filename=\"non-informative-regression.stan\"}\n// The input data is two vectors 'y' and 'X' of length 'N'.\ndata {\n  int<lower=0> N;\n  vector[N] y;\n  vector[N] x;\n}\n\ntransformed data {\n    matrix[N, 2] X_c = append_col(rep_vector(1, N), x);\n    matrix[2,2] XtX_inv = inverse(X_c' * X_c);\n\n    vector[2] beta_hat = XtX_inv * X_c' * y;\n    vector[N] y_hat = X_C * beta_hat;\n    \n    real<lower=0> s_2 = 1 / (N - 2) * (y - y_hat)' * (y - y_hat);\n}\n\n// The parameters accepted by the model. Our model\n// accepts two parameters 'beta' and 'sigma'.\nparameters {\n  vector beta;\n  real<lower=0> sigma; // Note that this is the variance\n}\n\n// The model to be estimated. We model the output\n// 'y' ~ N(x beta, sigma) by specifying the analytic\n// posterior defined above.\nmodel {\n  beta ~ multi_normal(beta_hat, sigma^2 * XtX_inv);\n  \n  sigma^2 ~ scaled_inv_chi_square(N-2, sqrt(s_2));\n}\n\ngenerated quantities {\n    vector[N] y_ppd;\n    \n    for (i in 1:N) {\n        y_ppd[i] = normal_rng(X_c[i,] * beta, sigma);\n    }\n}\n```\n\nNext we fit the model using `cmdstanr`. In this case, I will use 1000 warmup iterations, 1000 sampling iterations, with no thinning (thinning includes only every $k$th draw), and will refresh the print screen to see progress every 500 iterations. We can run several chains to see if where the chains start dictates any part of the posterior shape or location, and chains can be run in parallel to get more draws \\<=\\> better posterior approximation more quickly.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\ndata_list <- list(\n    N = nrow(ncaaw),\n    y = ncaaw$W,\n    x = ncaaw$FG3pct\n)\n\nfile <- file.path(\"non-informative-regression.stan\")\nnon_inf_model <- cmdstan_model(file)\n\nfit1 <- non_inf_model$sample(\n    data = data_list,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    thin = 1,\n    refresh = 500,\n    chains = 2,\n    show_messages = TRUE,\n    show_exceptions = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 2 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.3 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.4 seconds.\n\nBoth chains finished successfully.\nMean chain execution time: 0.4 seconds.\nTotal execution time: 0.9 seconds.\n```\n:::\n:::\n\n\nNext we'll check diagnostics for the sampler. First, we will look at the numeric diagnostic output from the method `$diagnostic_summary()` which reports if any transitions were divergent, if maximum tree depth was reached, and EBFMI. For this model and data set we don't see any issues in these summaries.\n\nNext, we check the traceplots in @fig-traceplots-non-info-1. The MCMC draws can be collected from the `fit` object using the `$draws()` method. These plots display the sampled values for each parameter in a line plot. We are looking for a horizontal fuzzy bar. Then we can also look at density plots in @fig-traceplots-non-info-2 which will tell us if the chains reached reasonably similar densities. On both counts, we are in good shape. The plots are created using the `bayesplot` package.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nfit1$diagnostic_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$num_divergent\n[1] 0 0\n\n$num_max_treedepth\n[1] 0 0\n\n$ebfmi\n[1] 1.158355 1.007918\n```\n:::\n:::\n\n::: {#fig-traceplots-non-info .cell layout-ncol=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nlibrary(bayesplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is bayesplot version 1.10.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- Online documentation and vignettes at mc-stan.org/bayesplot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- bayesplot theme set to bayesplot::theme_default()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   * Does _not_ affect other ggplot2 plots\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   * See ?bayesplot_theme_set for details on theme setting\n```\n:::\n\n```{.r .cell-code}\nmcmc_trace(fit1$draws(variables = c(\"beta\", \"sigma\")))\n\nmcmc_dens_overlay(fit1$draws(variables = c(\"beta\", \"sigma\")))\n```\n\n::: {.cell-output-display}\n![Traceplots for $\\beta$ and $\\sigma$.](intro_to_stan_files/figure-html/fig-traceplots-non-info-1.png){#fig-traceplots-non-info-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$.](intro_to_stan_files/figure-html/fig-traceplots-non-info-2.png){#fig-traceplots-non-info-2 width=672}\n:::\n\nDiagnostic plots for the posterior samples. Plots were made using the `bayesplot` package.\n:::\n\n\nFinally, after checking that the MCMC chains and diagnostics look satisfactory, we can continue to inference. The summary statistics for the parameters are displayed in @tbl-non-info-inf. This are generated by default with the `$summary()` method. The statistics include the posterior mean (`mean`), median (`median`), standard deviation (`sd`), mean absolute deviation (`mad`), and lower (`q5`) and upper bounds (`q95`) for a 90% credible interval. The statistics `rhat`, `ess_bulk`, and `ess_tail` are additional diagnostic measures that indicate how well the chains are sampling the posterior and how many effective draws we have made. Ideally `rhat` is very near 1, even 1.01 can be a significant problem. The effective sample sizes should be large/near the number of sampling iterations.\n\n\n::: {#tbl-non-info-inf .cell filename='intro-to-stan.R' tbl-cap='Summary statistics for the posterior samples for $\\beta$ and $\\sigma$.'}\n\n```{.r .cell-code}\nfit1$summary(variables = c(\"beta\", \"sigma\")) |> \n    kableExtra::kbl(booktabs = TRUE, format = \"html\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> variable </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> median </th>\n   <th style=\"text-align:right;\"> sd </th>\n   <th style=\"text-align:right;\"> mad </th>\n   <th style=\"text-align:right;\"> q5 </th>\n   <th style=\"text-align:right;\"> q95 </th>\n   <th style=\"text-align:right;\"> rhat </th>\n   <th style=\"text-align:right;\"> ess_bulk </th>\n   <th style=\"text-align:right;\"> ess_tail </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> beta[1] </td>\n   <td style=\"text-align:right;\"> -15.170201 </td>\n   <td style=\"text-align:right;\"> -15.17435 </td>\n   <td style=\"text-align:right;\"> 2.7264741 </td>\n   <td style=\"text-align:right;\"> 2.6386574 </td>\n   <td style=\"text-align:right;\"> -19.6968650 </td>\n   <td style=\"text-align:right;\"> -10.670060 </td>\n   <td style=\"text-align:right;\"> 1.003857 </td>\n   <td style=\"text-align:right;\"> 600.4229 </td>\n   <td style=\"text-align:right;\"> 668.3881 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> beta[2] </td>\n   <td style=\"text-align:right;\"> 1.016536 </td>\n   <td style=\"text-align:right;\"> 1.01743 </td>\n   <td style=\"text-align:right;\"> 0.0876394 </td>\n   <td style=\"text-align:right;\"> 0.0866691 </td>\n   <td style=\"text-align:right;\"> 0.8718595 </td>\n   <td style=\"text-align:right;\"> 1.159618 </td>\n   <td style=\"text-align:right;\"> 1.004031 </td>\n   <td style=\"text-align:right;\"> 596.0433 </td>\n   <td style=\"text-align:right;\"> 630.5212 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sigma </td>\n   <td style=\"text-align:right;\"> 5.927539 </td>\n   <td style=\"text-align:right;\"> 5.92005 </td>\n   <td style=\"text-align:right;\"> 0.2185852 </td>\n   <td style=\"text-align:right;\"> 0.2262596 </td>\n   <td style=\"text-align:right;\"> 5.5846900 </td>\n   <td style=\"text-align:right;\"> 6.297106 </td>\n   <td style=\"text-align:right;\"> 1.001305 </td>\n   <td style=\"text-align:right;\"> 862.2062 </td>\n   <td style=\"text-align:right;\"> 822.5273 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {#tbl-mle-res-1 .cell filename='intro-to-stan.R' output-location='column-fragment' tbl-cap='MLE estimates for $\\beta$ and $\\sigma$.'}\n\n```{.r .cell-code}\nmles |> \n    kableExtra::kbl(booktabs = TRUE, \n                    format = \"html\", digits = 3)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:left;\"> Parameters </th>\n   <th style=\"text-align:right;\"> Estimates </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:left;\"> beta_0 </td>\n   <td style=\"text-align:right;\"> -14.945 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> FG3pct </td>\n   <td style=\"text-align:left;\"> beta_1 </td>\n   <td style=\"text-align:right;\"> 1.009 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> sigma </td>\n   <td style=\"text-align:right;\"> 5.908 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWe can also check graphical summaries of this same information such as interval plots for each parameter's credible intervals or density/area plots. In @fig-non-info-ci-1 we have the 50% (thick bar) and 95% (thin bar) credible intervals with the posterior mean displayed as a point. The densities are plotted in ridgelines in @fig-non-info-ci-2 with areas shaded underneath to indicate the 50% interval and the width of the density indicates the 95% interval.\n\n\n::: {#fig-non-info-ci .cell layout-ncol=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nmcmc_intervals(fit1$draws(variables = c(\"beta\", \"sigma\")))\nmcmc_areas_ridges(fit1$draws(variables = c(\"beta\", \"sigma\")),\n                  prob_outer = 0.95, prob = 0.5)\n```\n\n::: {.cell-output-display}\n![Interval plots for $\\beta$ and $\\sigma$.](intro_to_stan_files/figure-html/fig-non-info-ci-1.png){#fig-non-info-ci-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$ in a ridgeline plot.](intro_to_stan_files/figure-html/fig-non-info-ci-2.png){#fig-non-info-ci-2 width=672}\n:::\n\nPlots for the 50% Credible Interval (inner band) and 95% Credible Interval (outer band) for $\\beta$ and $\\sigma$. Plots were made using the `bayesplot` package.\n:::\n\n\nOne additional way to check model fit is to assess posterior predictive checks. To do so we draw samples from the posterior predictive distribution $p(y^{new} | y) = \\int p(y^{new} | \\boldsymbol{\\beta}, \\sigma) p(\\boldsymbol{\\beta}, \\sigma | y) d\\boldsymbol{\\beta}d\\sigma$ by first sampling from the posterior (i.e. the draws in the MCMC chains) and then for each set of draws sampling $y^{new}$ given the corresponding values for $x^{new}$. In Stan this is easily accomplished using the generated quantities block. The generated quantities block generates new samples that we define using the current iteration's posterior draws of $\\beta$ and $\\sigma$.\n\n``` stan\ngenerated quantities {\n    // create a vector of N new observations\n    vector[N] y_ppd; \n    \n    // for each observation, sample from the regression likelihod\n    // using the posterior draws\n    for (i in 1:N) {\n        y_ppd[i] = normal_rng(X_c[i,] * beta, sigma);\n    }\n}\n```\n\nWe collect the PPD draws from the fit object using the draws method. From @fig-non-info-ppc we can see that while the predictive densities are centered in the correct location, the variances are far too large.\n\n\n::: {#fig-non-info-ppc .cell layout-ncol=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nlibrary(posterior)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is posterior version 1.5.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'posterior'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:bayesplot':\n\n    rhat\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    mad, sd, var\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    %in%, match\n```\n:::\n\n```{.r .cell-code}\ny_ppd <- as.matrix(as_draws_df(fit1$draws(variables = \"y_ppd\")))\n\nppc_dens_overlay(ncaaw$W,\n                 y_ppd[1:50, 1:350]) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins\",\n         x = \"Wins\")\n\nppc_intervals(ncaaw$W,\n                 y_ppd[1:50, 1:350],\n                 x = ncaaw$FG3pct) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins by 3pt%\",\n         x = \"3pt%\",\n         y = \"Wins\")\n```\n\n::: {.cell-output-display}\n![PPD densities for the wins given 3pt%.](intro_to_stan_files/figure-html/fig-non-info-ppc-1.png){#fig-non-info-ppc-1 width=672}\n:::\n\n::: {.cell-output-display}\n![PPD intervals for the wins plotted by 3pt%.](intro_to_stan_files/figure-html/fig-non-info-ppc-2.png){#fig-non-info-ppc-2 width=672}\n:::\n\nPosterior Predictive Check plots from `bayesplot`.\n:::\n\n\n### Conjugate Prior Regression Model\n\nNext, we'll implement the regression model with conjugate priors. Conjugacy refers to the situation where the prior and posterior distribution are from the same family. We'll start by re-defining our model.[^1]\n\n[^1]: See wikipedia for more details and derivations: <https://en.wikipedia.org/wiki/Bayesian_linear_regression>\n\n1.  **Conjugate prior:** $p(\\boldsymbol{\\beta}, \\sigma^2) = p(\\boldsymbol{\\beta} | \\sigma^2) p(\\sigma^2)$\n\n    1.  $\\boldsymbol{\\beta} | \\sigma^2 ~ N_2(\\boldsymbol{\\beta}_0, \\sigma^2 \\Lambda_0^{-1})$ where $\\boldsymbol{\\beta}_0 \\in \\mathbb{R}^2$ is a vector of prior coefficients, we'll set it to zero, and $\\Lambda_0$ is a $2\\times2$ prior correlation matrix. We will set $\\Lambda_0 = 10 I_2$ to get a weakly informative prior that is equivalent to ridge regression.\n\n    2.  $\\sigma^2 \\sim InvGamma(\\frac{\\nu_0}{2}, \\frac{1}{2} \\nu_0 s_0^2)$ where $\\nu_0$ is a prior sample size and $s_0$ is the prior standard deviation. We'll set these to $\\nu_0 = 1$ and $s_0^2 = 47$ which is approximately the sample variance of the NCAA women's basketball teams' wins.\n\n    3.  The parameters $\\boldsymbol{\\beta}_0, \\Lambda_0, \\nu_0, s_0^2$ that define the prior are referred to as hyperparameters. We will set them before running the model, although they could also be modeled if we wanted.\n\n2.  **The (Data) Likelihood:** the same as before, $\\mathbf{Y} | \\boldsymbol{\\beta}, \\sigma^2 \\sim N_N(X\\boldsymbol{\\beta}, \\sigma^2 I_N).$\n\n3.  **Posterior:**\n\n    1.  $\\boldsymbol{\\beta} | \\sigma^2, y \\sim N_2(\\boldsymbol{\\beta}_N, \\sigma^2 \\Lambda_N^{-1})$ where $\\boldsymbol{\\beta}_N = \\Lambda_N^{-1}(\\mathbf{X}'\\mathbf{X} \\hat{\\boldsymbol{\\beta}} + \\Lambda_0 \\boldsymbol{\\beta}_0)$ and $\\Lambda_N = (\\mathbf{X}'\\mathbf{X} + \\Lambda_0).$\n    2.  $\\sigma^2 | y \\sim InvGamma(\\sigma^2 | \\frac{\\nu_0 + N}{2}, \\frac{1}{2} \\nu_0 s_0^2 + \\frac{1}{2}(\\mathbf{y}'\\mathbf{y} + \\boldsymbol{\\beta}_0'\\Lambda_0 \\boldsymbol{\\beta}_0 - \\boldsymbol{\\beta}_N' \\Lambda_N \\boldsymbol{\\beta}_N)).$\n\nWe could again program this model using the analytic posterior. Instead, we'll program it only through the priors and likelihood and let Stan approximate the posterior. I will also allow the model to include more than one predictor so that $\\mathbf{X}$ is a $N \\times (K+1)$ matrix augmented with a column of ones. ([Download the file here](conjugate-regression.stan){target=\"_blank\"})\n\n``` {.stan filename=\"conjugate-regression.stan\"}\n\n// The input data is a vector 'y' of length 'N'.\ndata {\n  int<lower=0> N;\n  int<lower=0> K;\n  vector[N] y;\n  matrix[N, K] X;\n  \n  // hyperparameters\n  real beta_0;\n  real<lower=0> lambda_0;\n  real<lower=0> nu_0;\n  real<lower=0> s_02;\n}\n\ntransformed data {\n    matrix[N, K+1] X_mat = append_col(rep_vector(1, N), X);\n    vector[K+1] beta_0_vec = rep_vector(beta_0, K+1);\n    matrix[K+1, K+1] Lambda_0 = lambda_0 * identity_matrix(K+1);\n}\n\n// The parameters accepted by the model. Our model\n// accepts two parameters 'mu' and 'sigma'.\nparameters {\n  vector[K+1] beta;\n  real<lower=0> sigma2;\n}\n\n// The model to be estimated. We model the output\n// 'y' to be normally distributed with mean 'mu'\n// and standard deviation 'sigma'.\nmodel {\n  beta ~ multi_normal(beta_0_vec, sigma2 * Lambda_0);\n  sigma2 ~ scaled_inv_chi_square(nu_0, s_02);\n  \n  y ~ normal(X_mat * beta, sqrt(sigma2));\n}\n\ngenerated quantities {\n    real sigma = sqrt(sigma2);\n    vector[N] y_ppd;\n    \n    for (i in 1:N) {\n        y_ppd[i] = normal_rng(X_mat[i,] * beta, sqrt(sigma2));\n    }\n}\n```\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\ndata_list2 <- list(\n    N = nrow(ncaaw),\n    K = 1,\n    y = ncaaw$W,\n    X = as.matrix(ncaaw$FG3pct, nrow = nrow(ncaaw)),\n    \n    # hyperparameters\n    beta_0 = 0,\n    lambda_0 = 0.5,\n    nu_0 = 1,\n    s_02 = 47\n)\n\nfile2 <- file.path(\"conjugate-regression.stan\")\nconj_model <- cmdstan_model(file2)\n\nfit2 <- conj_model$sample(\n    data = data_list2,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    thin = 1,\n    refresh = 500,\n    chains = 2,\n    show_messages = TRUE,\n    show_exceptions = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 2 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.6 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.5 seconds.\n\nBoth chains finished successfully.\nMean chain execution time: 0.5 seconds.\nTotal execution time: 1.2 seconds.\n```\n:::\n:::\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nfit2$diagnostic_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$num_divergent\n[1] 0 0\n\n$num_max_treedepth\n[1] 0 0\n\n$ebfmi\n[1] 1.0922379 0.9649419\n```\n:::\n:::\n\n::: {#fig-traceplots-conj .cell layout-ncol=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nmcmc_trace(fit2$draws(variables = c(\"beta\", \"sigma\")))\n\nmcmc_dens_overlay(fit2$draws(variables = c(\"beta\", \"sigma\")))\n```\n\n::: {.cell-output-display}\n![Traceplots for $\\beta$ and $\\sigma$.](intro_to_stan_files/figure-html/fig-traceplots-conj-1.png){#fig-traceplots-conj-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$.](intro_to_stan_files/figure-html/fig-traceplots-conj-2.png){#fig-traceplots-conj-2 width=672}\n:::\n\nDiagnostic plots for the posterior samples. Plots were made using the `bayesplot` package.\n:::\n\n\nAgain the MCMC chains and diagnostics look satisfactory. The summary statistics for the parameters are displayed in @tbl-conj-inf.\n\n\n::: {#tbl-conj-inf .cell filename='intro-to-stan.R' tbl-cap='Summary statistics for the posterior samples for $\\beta$ and $\\sigma$.'}\n\n```{.r .cell-code}\nfit2$summary(variables = c(\"beta\", \"sigma\")) |> \n    kableExtra::kbl(booktabs = TRUE, format = \"html\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> variable </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> median </th>\n   <th style=\"text-align:right;\"> sd </th>\n   <th style=\"text-align:right;\"> mad </th>\n   <th style=\"text-align:right;\"> q5 </th>\n   <th style=\"text-align:right;\"> q95 </th>\n   <th style=\"text-align:right;\"> rhat </th>\n   <th style=\"text-align:right;\"> ess_bulk </th>\n   <th style=\"text-align:right;\"> ess_tail </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> beta[1] </td>\n   <td style=\"text-align:right;\"> -10.1130072 </td>\n   <td style=\"text-align:right;\"> -10.1779000 </td>\n   <td style=\"text-align:right;\"> 2.5633911 </td>\n   <td style=\"text-align:right;\"> 2.5422068 </td>\n   <td style=\"text-align:right;\"> -14.016285 </td>\n   <td style=\"text-align:right;\"> -5.7887765 </td>\n   <td style=\"text-align:right;\"> 1.002474 </td>\n   <td style=\"text-align:right;\"> 691.3518 </td>\n   <td style=\"text-align:right;\"> 611.3816 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> beta[2] </td>\n   <td style=\"text-align:right;\"> 0.8546671 </td>\n   <td style=\"text-align:right;\"> 0.8576105 </td>\n   <td style=\"text-align:right;\"> 0.0829050 </td>\n   <td style=\"text-align:right;\"> 0.0838529 </td>\n   <td style=\"text-align:right;\"> 0.716798 </td>\n   <td style=\"text-align:right;\"> 0.9799592 </td>\n   <td style=\"text-align:right;\"> 1.002152 </td>\n   <td style=\"text-align:right;\"> 682.3694 </td>\n   <td style=\"text-align:right;\"> 615.0243 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sigma </td>\n   <td style=\"text-align:right;\"> 5.9770841 </td>\n   <td style=\"text-align:right;\"> 5.9650100 </td>\n   <td style=\"text-align:right;\"> 0.2413463 </td>\n   <td style=\"text-align:right;\"> 0.2338357 </td>\n   <td style=\"text-align:right;\"> 5.581616 </td>\n   <td style=\"text-align:right;\"> 6.3912945 </td>\n   <td style=\"text-align:right;\"> 1.001529 </td>\n   <td style=\"text-align:right;\"> 708.4679 </td>\n   <td style=\"text-align:right;\"> 511.2857 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nAnd here's a quick reminder of our results for the non-informative prior and MLE fits in @tbl-fit-comp.\n\n\n::: {#tbl-fit-comp .cell filename='intro-to-stan.R' tbl-cap='Comparison of the estimates for $\\beta$ and $\\sigma$.'}\n\n```{.r .cell-code}\nmcmc_summary <- cbind(mles,\n  fit1$summary(variables = c(\"beta\", \"sigma\"))[,c(\"mean\", \"sd\")])\nmcmc_summary <- cbind(mcmc_summary,\n  fit2$summary(variables = c(\"beta\", \"sigma\"))[,c(\"mean\", \"sd\")])\ncolnames(mcmc_summary) <- c(\"Variable\", \"MLE\", \"Non-info Est\", \"Non-info SD\", \"Conj Est\", \"Conj SD\")\n\nmcmc_summary |>\n    kableExtra::kbl(booktabs = TRUE, format = \"html\", digits = 3)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:left;\"> Variable </th>\n   <th style=\"text-align:right;\"> MLE </th>\n   <th style=\"text-align:right;\"> Non-info Est </th>\n   <th style=\"text-align:right;\"> Non-info SD </th>\n   <th style=\"text-align:right;\"> Conj Est </th>\n   <th style=\"text-align:right;\"> Conj SD </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:left;\"> beta_0 </td>\n   <td style=\"text-align:right;\"> -14.945 </td>\n   <td style=\"text-align:right;\"> -15.170 </td>\n   <td style=\"text-align:right;\"> 2.726 </td>\n   <td style=\"text-align:right;\"> -10.113 </td>\n   <td style=\"text-align:right;\"> 2.563 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> FG3pct </td>\n   <td style=\"text-align:left;\"> beta_1 </td>\n   <td style=\"text-align:right;\"> 1.009 </td>\n   <td style=\"text-align:right;\"> 1.017 </td>\n   <td style=\"text-align:right;\"> 0.088 </td>\n   <td style=\"text-align:right;\"> 0.855 </td>\n   <td style=\"text-align:right;\"> 0.083 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> sigma </td>\n   <td style=\"text-align:right;\"> 5.908 </td>\n   <td style=\"text-align:right;\"> 5.928 </td>\n   <td style=\"text-align:right;\"> 0.219 </td>\n   <td style=\"text-align:right;\"> 5.977 </td>\n   <td style=\"text-align:right;\"> 0.241 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nIn @fig-conj-ci-1 we have the 50% and 95% CIs with the posterior mean displayed as a point. The densities are plotted in ridgelines in @fig-conj-ci-2.\n\n\n::: {#fig-conj-ci .cell layout-ncol=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nmcmc_intervals(fit2$draws(variables = c(\"beta\", \"sigma\")))\nmcmc_areas_ridges(fit2$draws(variables = c(\"beta\", \"sigma\")),\n                  prob_outer = 0.95, prob = 0.5)\n```\n\n::: {.cell-output-display}\n![Interval plots for $\\beta$ and $\\sigma$.](intro_to_stan_files/figure-html/fig-conj-ci-1.png){#fig-conj-ci-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$ in a ridgeline plot.](intro_to_stan_files/figure-html/fig-conj-ci-2.png){#fig-conj-ci-2 width=672}\n:::\n\nPlots for the 50% Credible Interval (inner band) and 95% Credible Interval (outer band) for $\\beta$ and $\\sigma$. Plots were made using the `bayesplot` package.\n:::\n\n\nWe collect the PPD draws from the fit object using the draws method. From @fig-conj-ppc we can see that while the predictive densities match pretty well and the intervals are centered on the OLS line of best fit.\n\n\n::: {#fig-conj-ppc .cell layout-ncol=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\ny_ppd <- as.matrix(as_draws_df(fit2$draws(variables = \"y_ppd\")))\n\nppc_dens_overlay(ncaaw$W,\n                 y_ppd[1:50, 1:350]) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins\",\n         x = \"Wins\")\n\nppc_intervals(ncaaw$W,\n                 y_ppd[1:50, 1:350],\n                 x = ncaaw$FG3pct) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins by 3pt%\",\n         x = \"3pt%\",\n         y = \"Wins\")\n```\n\n::: {.cell-output-display}\n![PPD densities for the wins given 3pt%.](intro_to_stan_files/figure-html/fig-conj-ppc-1.png){#fig-conj-ppc-1 width=672}\n:::\n\n::: {.cell-output-display}\n![PPD intervals for the wins plotted by 3pt%.](intro_to_stan_files/figure-html/fig-conj-ppc-2.png){#fig-conj-ppc-2 width=672}\n:::\n\nPosterior Predictive Check plots from `bayesplot`.\n:::\n\n\n## Some Other Useful Resources for Stan\n\nFirst, here's the three essential guides for using Stan:\n\n-   [Stan Function Guide](https://mc-stan.org/docs/functions-reference/index.html) - reference for all the built-in functions and distributions as well as guides for writing custom functions and distributions\n\n-   [Stan User's Guide](https://mc-stan.org/docs/stan-users-guide/index.html) - reference for example models, how to build efficient models, and some inference techniques\n\n-   [Stan Reference Manual](https://mc-stan.org/docs/reference-manual/index.html) - reference for programming in Stan with a focus on how the language works\n\nHere are some other useful packages to use for Bayesian data analysis with Stan (or other packages). We used some of these in this tutorial!\n\n-   [brms](https://paul-buerkner.github.io/brms/index.html): Bayesian regression models using Stan\n\n-   [posterior](https://mc-stan.org/posterior/): Useful for working with Stan output\n\n-   [bayesplot](http://mc-stan.org/bayesplot): ggplot2-based plotting functions for MCMC draws designed work well with Stan\n\n-   [loo](http://mc-stan.org/loo): Leave-one-out cross validation for model checking and selection that works with the log-posterior. Works best with `rstanarm` but can work with `cmdstanr` too.\n\nHere's a list of useful resources for debugging issues with divergences, hitting maximum tree-depth, low EBFMI, and understanding diagnostics:\n\n-   [Stan's Guide to Runtime warnings and convergence problems](https://mc-stan.org/misc/warnings.html)\n\n-   [Prior Choices and Selection](https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations)\n\n-   [Convergence Diagnostics for MCMC](https://arxiv.org/pdf/1909.11827.pdf)\n\n-   [Official Stan Forum](https://discourse.mc-stan.org/)\n\n## Bonus: Regression Modeling with Incomplete Data\n\nAs a bonus section, we'll use the `brms` package to fit a regression model where we have incomplete predictor observations. Incomplete data analysis ranges from complete case analysis (incomplete cases are dropped) and mean imputation to multiple imputation, joint modeling, and EM algorithm [@schafer2002].[^2] We're going to use `mice` [@buuren2010mice] and `brms` [@bürkner2018] to demonstrate the imputation and fitting Bayesian regression models with a convenient front-end that writes the Stan code for us.\n\n[^2]: See [@rubin1976, @dempster1977, @rubin1987, @harel2007multiple, @white2011] for more details on incomplete data analysis.\n\nIn our case, we are going to use junior year scoring (points per game) to predict senior year scoring for women's college basketball players from 2020-21 to the 2022-23 seasons. The data set only contains players who played in at least 75% of games each season, so partial seasons due to injury or being a bench player are excluded. Players who only have a junior season are excluded from the analysis.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nncaaw_i <- read.csv(\"Data/ncaaw-individuals.csv\", header = TRUE)\nhead(ncaaw_i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Name Pos_jr Pos_sr G_jr G_sr PPG_jr PPG_sr Cl_jr\n1     A'Jah Davis      F      F   29   32   16.6   16.2   Jr.\n2 Abby Brockmeyer      F      F   NA   31     NA   16.3   Jr.\n3       Abby Feit      F      F   29   28   15.1   15.5   Jr.\n4     Abby Meyers      G      G   NA   30     NA   17.9   Jr.\n5     Abby Meyers      G      G   NA   35     NA   14.3   Jr.\n6   Adriana Shipp      G      G   NA   30     NA   13.9   Jr.\n```\n:::\n:::\n\n\nOur imputation model will be univariate linear regression that use all other variables as predictors. For example, imputing $PPG_{jr}$ will be done by regressing on $PPG_{sr}, G_{jr}, G_{sr}$. $PPG_{jr}$ and $G_{jr}$ are incomplete for $n_{mis} = 176$ players while $n_{obs} = 98$ players have stats from both years. This missing data pattern is displayed in @fig-miss-patt.\n\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nlibrary(mice)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'mice'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    cbind, rbind\n```\n:::\n\n```{.r .cell-code}\nm_pat <- md.pattern(ncaaw_i, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![Missing data patterns for the NCAA women's basketball players from 2020-2023 who played in their junior and senior year. The red boxes correspond to missing values, so there are 176 players who recorded full senior seasons (played in >75% of total games) but missing or shortened junior seasons.](intro_to_stan_files/figure-html/fig-miss-patt-1.png){#fig-miss-patt width=672}\n:::\n:::\n\n::: {.cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nggplot(ncaaw_i, aes(PPG_jr, PPG_sr, color = G_jr)) +\n    geom_point() +\n    scale_color_viridis_c(name = \"G - Jr\") +\n    labs(x = \"PPG - Jr\",\n         y = \"PPG - Sr\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![Points per game (PPG) from Junior and Senior seasons.](intro_to_stan_files/figure-html/fig-ppg-jr-sr-1.png){#fig-ppg-jr-sr width=672}\n:::\n:::\n\n\n### Multiple Imputation with mice\n\nFirst, we'll try out imputing before model fitting using `mice`. MICE stands for Multiple Imputation by Chained Equations and is procedure that creates a set of $M$ completed data sets from an incomplete data set. Multiple Imputation is a three stage procedure:\n\n1.  Each incomplete variable is imputed with posterior predictive draws from a regression model with all other variables as predictors. The procedure iterates through the incomplete variables several times to converge to the posterior predictive distribution of the missing data given the observed.\n2.  These completed data sets are then analyzed individually with a standard complete data method.\n3.  Results from each analysis are combined. Typically this is done with Rubin's rules [@rubin1987], but `brms` follows the advice of @zhou2010 and simply stacks the posterior draw matrices from each fitted model.\n\n\n::: {.cell filename='intro-to-stan.R' hash='intro_to_stan_cache/html/mice-fit_1d9fae28e49d28fe5700af6bdd429587'}\n\n```{.r .cell-code}\nlibrary(brms)\n\nimps <- mice(ncaaw_i, m = 10, method = \"norm\", maxit = 10, printFlag = FALSE)\n\nfit_brm_mice <- brm_multiple(PPG_sr ~ G_jr * PPG_jr, data = imps, chains = 2,\n                             refresh = 0)\nsummary(fit_brm_mice)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: PPG_sr ~ G_jr * PPG_jr \n   Data: imps (Number of observations: 274) \n  Draws: 20 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 20000\n\nPopulation-Level Effects: \n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      18.62      5.20     8.69    28.79 1.19       71      444\nG_jr           -0.30      0.20    -0.69     0.09 1.19       72      282\nPPG_jr         -0.17      0.30    -0.75     0.41 1.19       71      429\nG_jr:PPG_jr     0.02      0.01    -0.00     0.04 1.19       71      239\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.17      0.10     1.98     2.38 1.07      170      521\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\n### Imputation During Model Fitting\n\nImputation during model fitting takes a different approach. Imputations are made for each incomplete variable using a different conditional model for each variable. This approach differs from MI and MICE in two key ways: (i) the model is only fit once since the imputation model is part of the analysis model, (ii) the model must be constructed uniquely for each analysis scenario whereas MI completed data sets can be re-used with different analyses.\n\n\n::: {.cell filename='intro-to-stan.R' hash='intro_to_stan_cache/html/brm-mi-fit_5b7ec6b19025404ce963ffc9e5d4e3fb'}\n\n```{.r .cell-code}\nbform <- bf(PPG_sr | mi() ~ mi(G_jr) * mi(PPG_jr)) +\n    bf(PPG_jr | mi() ~ G_sr + PPG_sr) +\n    bf(G_jr | mi() ~ G_sr + PPG_sr) + set_rescor(FALSE)\n\nfit_brm_mi <- brm(bform, data = ncaaw_i, \n                  refresh = 500, iter = 2000, thin = 1,\n                  backend = \"cmdstanr\", \n                  control = list(adapt_delta = 0.8, \n                                 max_depth = 10,\n                                show_exceptions = FALSE),\n                  chains = 2,\n                  cores = 2)\n\nsummary(fit_brm_mi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: MV(gaussian, gaussian, gaussian) \n  Links: mu = identity; sigma = identity\n         mu = identity; sigma = identity\n         mu = identity; sigma = identity \nFormula: PPG_sr | mi() ~ mi(G_jr) * mi(PPG_jr) \n         PPG_jr | mi() ~ G_sr + PPG_sr \n         G_jr | mi() ~ G_sr + PPG_sr \n   Data: ncaaw_i (Number of observations: 274) \n  Draws: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 2000\n\nPopulation-Level Effects: \n                      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nPPGsr_Intercept          15.99      2.32    11.15    20.69 1.00      874\nPPGjr_Intercept           6.01      2.31     1.31    10.42 1.00     1015\nGjr_Intercept             3.01      6.06    -8.98    14.21 1.00     1271\nPPGjr_G_sr               -0.04      0.06    -0.17     0.09 1.00     1238\nPPGjr_PPG_sr              0.71      0.08     0.55     0.87 1.00      801\nGjr_G_sr                  0.55      0.18     0.21     0.91 1.00     1311\nGjr_PPG_sr                0.28      0.23    -0.17     0.76 1.00      570\nPPGsr_miG_jr             -0.29      0.09    -0.48    -0.10 1.00      874\nPPGsr_miPPG_jr           -0.03      0.15    -0.32     0.28 1.00      774\nPPGsr_miG_jr:miPPG_jr     0.02      0.01     0.01     0.03 1.00      790\n                      Tail_ESS\nPPGsr_Intercept            640\nPPGjr_Intercept           1314\nGjr_Intercept             1480\nPPGjr_G_sr                1378\nPPGjr_PPG_sr              1480\nGjr_G_sr                  1290\nGjr_PPG_sr                 781\nPPGsr_miG_jr               654\nPPGsr_miPPG_jr             610\nPPGsr_miG_jr:miPPG_jr      714\n\nFamily Specific Parameters: \n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma_PPGsr     1.86      0.09     1.70     2.04 1.00     1979     1559\nsigma_PPGjr     2.30      0.14     2.02     2.59 1.00      615     1098\nsigma_Gjr       5.35      0.39     4.66     6.18 1.00      536     1114\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\n`brms` is built on Stan, so we can also take a look at the traceplots of the samples in @fig-brm-mi-trace.\n\n\n::: {#fig-brm-mi-trace .cell layout-nrow=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nplot(fit_brm_mi, variable = c(\"b_PPGsr\", \"bsp_\"), regex = TRUE, ask = FALSE, N = 3)\n```\n\n::: {.cell-output-display}\n![](intro_to_stan_files/figure-html/fig-brm-mi-trace-1.png){#fig-brm-mi-trace-1 width=672}\n:::\n\n::: {.cell-output-display}\n![](intro_to_stan_files/figure-html/fig-brm-mi-trace-2.png){#fig-brm-mi-trace-2 width=672}\n:::\n\nTraceplots of brms analysis model parameters.\n:::\n\n::: {#fig-brm-mi-trace-imp .cell layout-nrow=\"2\" filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nplot(fit_brm_mi, variable = c(\"b_PPGjr\", \"b_Gjr\"), regex = TRUE, ask = FALSE, N = 3)\n```\n\n::: {.cell-output-display}\n![$PPG_{jr}$ imputation model parameters](intro_to_stan_files/figure-html/fig-brm-mi-trace-imp-1.png){#fig-brm-mi-trace-imp-1 width=672}\n:::\n\n::: {.cell-output-display}\n![$G_{jr}$ imputation model parameters](intro_to_stan_files/figure-html/fig-brm-mi-trace-imp-2.png){#fig-brm-mi-trace-imp-2 width=672}\n:::\n\nTraceplots of brms imputation model parameters.\n:::\n\n::: {#fig-brm-mi-cond-eff .cell filename='intro-to-stan.R'}\n\n```{.r .cell-code}\nplot(brms::conditional_effects(fit_brm_mice, \"PPG_jr:G_jr\", resp = \"PPGsr\"))\nplot(brms::conditional_effects(fit_brm_mi, \"PPG_jr:G_jr\", resp = \"PPGsr\"))\n```\n\n::: {.cell-output-display}\n![Estimates after MICE imputation](intro_to_stan_files/figure-html/fig-brm-mi-cond-eff-1.png){#fig-brm-mi-cond-eff-1 width=576}\n:::\n\n::: {.cell-output-display}\n![Estimates with joint model](intro_to_stan_files/figure-html/fig-brm-mi-cond-eff-2.png){#fig-brm-mi-cond-eff-2 width=576}\n:::\n\nThe estimated conditional effects of PPG as a junior and junior-year Games played on PPG as a senior.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}